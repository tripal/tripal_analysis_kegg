<?php

require_once "includes/parseKAASHeir.inc";

/*******************************************************************************
 *
******************************************************************************/

function tripal_analysis_kegg_init() {
  // add the tripal_analysis_kegg JS and CSS
  drupal_add_js(drupal_get_path('module', 'tripal_analysis_kegg') . '/theme/js/tripal_analysis_kegg.js');
  drupal_add_css(drupal_get_path('module', 'tripal_analysis_kegg') . '/theme/css/tripal_analysis_kegg.css', 'theme');
  // add the jsTree JS and CSS
  drupal_add_css(drupal_get_path('theme', 'tripal') . '/js/jsTree/source/tree_component.css', 'theme');
  drupal_add_js(drupal_get_path('theme', 'tripal') . '/js/jsTree/source/_lib.js');
  drupal_add_js(drupal_get_path('theme', 'tripal') . '/js/jsTree/source/tree_component.js');
}
/*******************************************************************************
 *  Provide information to drupal about the node types that we're creating
*  in this module
*/
function tripal_analysis_kegg_node_info() {
  $nodes = array();
  $nodes['chado_analysis_kegg'] = array(
      'name' => t('Analysis: KEGG'),
      'module' => 'chado_analysis_kegg',
      'description' => t('Results from a KEGG/KAAS analysis'),
      'has_title' => FALSE,
      'title_label' => t('Analysis: KEGG'),
      'has_body' => FALSE,
      'body_label' => t('KEGG Analysis Description'),
      'locked' => TRUE
  );
  return $nodes;
}

/*******************************************************************************
 * Menu items are automatically added for the new node types created
* by this module to the 'Create Content' Navigation menu item.  This function
* adds more menu items needed for this module.
*/
function tripal_analysis_kegg_menu() {
  $items['brite/%'] = array(
      'title' => t('KEGG BRITE'),
      'page callback' => 'tripal_analysis_kegg_brite',
      'page arguments' => array(1, 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
  );
  $items['tripal_analysis_kegg_org_report/%'] = array(
      'path' => 'tripal_analysis_kegg_org_report',
      'title' => t('Analysis KEGG report'),
      'page callback' => 'tripal_analysis_kegg_org_report',
      'page arguments' => array(1),
      'access arguments' => array('access chado_analysis_kegg content'),
      'type' => MENU_CALLBACK
  );
  return $items;
}
/*******************************************************************************
 * Set the permission types that the chado module uses.  Essentially we
* want permissionis that protect creation, editing and deleting of chado
* data objects
*/
function tripal_analysis_kegg_perm() {
  return array(
      'access chado_analysis_kegg content',
      'create chado_analysis_kegg content',
      'delete chado_analysis_kegg content',
      'edit chado_analysis_kegg content',
  );
}

/*******************************************************************************
 *  The following function proves access control for users trying to
*  perform actions on data managed by this module
*/
function chado_analysis_kegg_access($op, $node, $account) {
  if ($op == 'create') {
    if (!user_access('create chado_analysis_kegg content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'update') {
    if (!user_access('edit chado_analysis_kegg content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'delete') {
    if (!user_access('delete chado_analysis_kegg content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'view') {
    if (!user_access('access chado_analysis_kegg content', $account)) {
      return FALSE;
    }
  }
  return NULL;
}

/*******************************************************************************
 */
function tripal_analysis_kegg_brite($analysis_id, $type_id, $ajax, $is_v0_3=0) {
  global $base_url;
  $theme_dir = drupal_get_path('theme', 'tripal');
  // If not called by ajax
  if (!$ajax) {
    $content .=
    "<div id=\"tripal_kegg_brite_results\" class=\"tripal_kegg_brite-info-box\">
    <table>
    <tr>
    <th>KEGG BRITE Heirarchy</th>
    <th id=\"tripal_kegg_brite_header\">Hierarchy:</th>
    </tr>
    <tr>
    <td nowrap valign=\"top\">
    ";
    // List all BRITE terms on the left. The SQL statement below can use
    // the older method for CVTerms with BRITE hierarchies or the newer method
    $sql = "
      SELECT DISTINCT CVT.name, CVT.cvterm_id
      FROM {cvterm} CVT
        INNER JOIN {analysisprop} AP ON CVT.cvterm_id = AP.type_id
        INNER JOIN {cv} CV on CV.cv_id = CVT.cv_id
      WHERE AP.analysis_id = %d AND
        (CVT.definition LIKE 'KEGG BRITE term: %' or CV.name = 'KEGG_BRITE')
      ORDER BY CVT.cvterm_id";

    $result = chado_query($sql, $analysis_id);

    while ($brite_term = db_fetch_object($result)) {
      $url = url("brite/$analysis_id/$brite_term->cvterm_id/1");
      $content .= "<li class=\"tripal_kegg_brite_terms\"><a onclick=\"return tripal_update_brite(".
          "this, $brite_term->cvterm_id, '$base_url', '$theme_dir')\" href=\"$url\">
          $brite_term->name
          </a></li>";
    }
    // Show the hierarchy tree
    $content .="</td>
    <td nowrap id=\"tripal_kegg_brite_hierarchy\" valign=\"top\">";
    $content .= "<i>Note:</i> Click a BRITE term for its functional hierarchy";

    // If called by ajax, generate tree structure
  } 
  else {
    // Get BRITE term from cvterm table
    
    $sql = 'SELECT name FROM {cvterm} WHERE cvterm_id=%d';
    $brite_term = db_result(chado_query($sql, $type_id));

    // Get BRITE hierarchy tree
    $sql = "
      SELECT value
      FROM {analysisprop} AP
        INNER JOIN {CVterm} CVT on AP.type_id = CVT.cvterm_id
        INNER JOIN {CV} on CVT.cv_id = CV.cv_id
      WHERE (CV.name = 'tripal' or CV.name = 'KEGG_BRITE') and CVT.name = '%s'
       AND AP.analysis_id = %d
    ";
    $result = db_fetch_object(chado_query($sql, $brite_term, $analysis_id));
    
    $content .= "<div class=\"tripal_kegg_brite_tree\" id=\"tripal_kegg_brite_tree_$type_id\">$result->value</div>";
  }

  if (!$ajax) {
    $content .= "     </td>
    </tr>
    </table>
    </div>";
  }
  // since this function provides output for addition into
  // an analysis page, as well as an AJAX refresh of content
  // within the BRITE hierarchy we need to setup the return
  // different depending on the request type
  if ($ajax) {
    drupal_json(array('update' => $content,
        'id' => "tripal_kegg_brite_tree_$type_id",
        'brite_term' => "Hierarchy: $brite_term"));
  } 
  else {
    return $content;
  }
}

/*******************************************************************************
 *  Provide a KEGG Analysis form
*/
function chado_analysis_kegg_form($node, $form_state) {
	
  // add in the default fields
  $form = chado_analysis_form($node, $form_state);

  // set the defaults
  $kegg = $node->analysis->tripal_analysis_kegg;
  $query_re = $kegg->query_re;
  $query_type = $kegg->query_type;
  $query_uniquename = $kegg->query_uniquename;
  $organism_id = $kegg->organism_id;

  $hierfile = $kegg->hierfile;

  $moreSettings ['kegg'] = 'KEGG Analysis Settings';
  $form['kegg'] = array(
      '#title' => t('KEGG Settings'),
      '#type' => 'fieldset',
      '#description' => t('Specific Settings for KEGG Analysis.'),
      '#collapsible' => TRUE,
      '#attributes' => array('id' => 'kegg-extra-settings'),
      '#weight' => 11
  );
  $form['kegg']['hierfile'] = array(
      '#title' => t('KAAS hier.tar.gz Output File'),
      '#type' => 'textfield',
      '#description' => t('The full path to the hier.tar.gz file generated by KAAS.
          Alternatively, you can input the full path to the directory
          that contains decompressed kegg files.'),
      '#default_value' => $hierfile,
  );
  $form['kegg']['query_re'] = array(
      '#title' => t('Query Name RE'),
      '#type' => 'textfield',
      '#description' => t('Enter the regular expression that will extract the '.
          'feature name from the results line in the KEGG heir results. This will be '.
          'the same as the definition line in the query FASTA file used for the analysis.  This option is '.
          'is only required when the query does not identically match a feature '.
          'in the database.'),
      '#default_value' => $query_re,
  );

  $form['kegg']['query_type'] = array(
      '#title' => t('Query Type'),
      '#type' => 'textfield',
      '#description' => t('Please enter the Sequence Ontology term that describes '.
          'the query sequences used for KEGG.  This is only necessary if two '.
          'or more sequences have the same name.'),
      '#default_value' => $query_type,
  );
  
  $sql = "
    SELECT organism_id, genus, species
    FROM {organism}
    ORDER BY genus,species
  ";
  $orgs = chado_query($sql);
  $organisms = array();
  $organisms[] = '';
  while($organism = db_fetch_object($orgs)) {
    $organisms[$organism->organism_id] = $organism->genus . " " . $organism->species;
  }
  $form['kegg']['organism_id'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#description' => t('Select the organism for these KEGG results. The
        feature names in the KAAS .hier files must exist for the specified organism.'),
    '#options' => $organisms,
    '#default_value' => $organism_id
  );

  $form['kegg']['query_uniquename'] = array(
      '#title' => t('Use Unique Name'),
      '#type' => 'checkbox',
      '#description' => t('Select this checkbox if the feature name in the KEGG heir file '.
          'matches the uniquename in the database.  By default, the feature will '.
          'be mapped to the "name" of the feature.'),
      '#default_value' => $query_uniquename,
  );
  $form['kegg']['keggjob'] = array(
      '#type' => 'checkbox',
      '#title' => t('Submit a job to parse the kegg output into Chado'),
      '#description' => t('Note: features used in the KAAS analysis must '.
          'exist in chado before parsing the file. Otherwise, KEGG '.
          'results that cannot be linked to a feature will be '.
          'discarded.'),
  );
  return $form;
}
/**
 *
 */
function chado_analysis_kegg_validate($node, &$form) {
  // use the analysis parent to validate the node
  tripal_analysis_validate($node, $form);
}
/*******************************************************************************
 *
*/
function chado_analysis_kegg_insert($node) {

  // get the analysis_id from the node before the call below
  $analysis_id = $node->analysis_id;
  
  // insert the analysis. If the analysis already exist then this
  // call will link it to a new Drupa node.
  chado_analysis_insert($node);
  
  // If this analysis already exists then don't recreate it in chado. This can happen
  // when nodes are synced.  They already exist but Drupal doesn't know it and calls 
  // this function.
  if (!$analysis_id) {    
    
    // now add in the remaining settings as a single property but separated by bars
    tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_settings', $node->hierfile);
    tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_query_re', $node->query_re);
    tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_query_type', $node->query_type);
    tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_query_uniquename', $node->query_uniquename);
    tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_organism_id', $node->organism_id);
     
    // Add a job if the user wants to parse the html output
    chado_analysis_kegg_submit_job($node);
  }
}
/**
 *
 */
function chado_analysis_kegg_submit_job($node) {
  global $user;
  global $base_url;

  if ($node->keggjob) {
    $job_args[0] = $node->analysis_id;
    $job_args[1] = trim($node->hierfile);
    $job_args[2] = $base_url;
    $job_args[3] = trim($node->query_re);
    $job_args[4] = trim($node->query_type);
    $job_args[5] = trim($node->query_uniquename);
    $job_args[6] = $node->organism_id;

    if (is_readable(trim($node->hierfile))) {
      $fname = preg_replace("/.*\/(.*)/", "$1", trim($node->hierfile));
      tripal_add_job("Parse KAAS output: $fname", 'tripal_analysis_kegg',
          'tripal_analysis_kegg_parseHierFile', $job_args, $user->uid);
    } 
    else {
      drupal_set_message("Can not open KAAS hier.tar.gz output file. Job not scheduled.", "error");
    }
  }
}
/*******************************************************************************
 * Delete KEGG anlysis
*/
function chado_analysis_kegg_delete($node) {
  chado_analysis_delete($node);
}

/*******************************************************************************
 * Update KEGG analysis
*/
function chado_analysis_kegg_update($node) {
  // insert the analysis
  chado_analysis_update($node);

  // now add in the remaining settings as a single property but separated by bars
  tripal_analysis_update_property($node->analysis_id, 'analysis_kegg_settings', $node->hierfile, 1);
  tripal_analysis_update_property($node->analysis_id, 'analysis_kegg_query_re', $node->query_re, 1);
  tripal_analysis_update_property($node->analysis_id, 'analysis_kegg_query_type', $node->query_type, 1);
  tripal_analysis_update_property($node->analysis_id, 'analysis_kegg_query_uniquename', $node->query_uniquename, 1);
  tripal_analysis_insert_property($node->analysis_id, 'analysis_kegg_organism_id', $node->organism_id);
   
  // Add a job if the user wants to parse the output
  chado_analysis_kegg_submit_job($node);
}
/*******************************************************************************
 *  When a node is requested by the user this function is called to allow us
*  to add auxiliary data to the node object.
*/
function chado_analysis_kegg_load($node) {

  // load the default set of analysis fields
  $additions = chado_analysis_load($node);

  // create some variables for easier lookup
  $analysis = $additions->analysis;
  $analysis_id = $analysis->analysis_id;

  // get the heirfile name
  $hierfile        = tripal_analysis_get_property($analysis_id, 'analysis_kegg_settings');
  $query_re        = tripal_analysis_get_property($analysis->analysis_id, 'analysis_kegg_query_re');
  $query_type      = tripal_analysis_get_property($analysis->analysis_id, 'analysis_kegg_query_type');
  $query_uniquename= tripal_analysis_get_property($analysis->analysis_id, 'analysis_kegg_query_uniquename');
  $organism_id     = tripal_analysis_get_property($analysis->analysis_id, 'analysis_kegg_organism_id');
  
  
  if (!is_object($analysis->tripal_analysis_kegg)) {
    $analysis->tripal_analysis_kegg = new stdClass;
  }

  $analysis->tripal_analysis_kegg->hierfile        = $hierfile->value;
  $analysis->tripal_analysis_kegg->query_re        = $query_re->value;
  $analysis->tripal_analysis_kegg->query_type      = $query_type->value;
  $analysis->tripal_analysis_kegg->query_uniquename= $query_uniquename->value;
  $analysis->tripal_analysis_kegg->organism_id     = $organism_id->value;

  return $additions;
}

/**
 *
 */
function chado_analysis_kegg_view($node, $teaser = FALSE, $page = FALSE) {
  // use drupal's default node view:
  if (!$teaser) {
    $node = node_prepare($node, $teaser);
    // When previewing a node submitting form, it shows 'Array' instead of
    // correct date format. We need to format the date here
    $time = $node->timeexecuted;
    if (is_array($time)) {
      $month = $time['month'];
      $day = $time['day'];
      $year = $time['year'];
      $timestamp = $year . '-' . $month . '-' . $day;
      $node->timeexecuted = $timestamp;
    }
  }
  return $node;
}
/**
 *
 *
 * @ingroup tripal_analysis_kegg
 */
function tripal_analysis_kegg_block($op = 'list', $delta = 0, $edit=array()) {
  switch ($op) {
    case 'list':
      $blocks['featurekegg']['info'] = t('Tripal Feature KEGG Terms');
      $blocks['featurekegg']['cache'] = BLOCK_NO_CACHE;

      $blocks['orgkegg']['info'] = t('Organism KEGG Summary');
      $blocks['orgkegg']['cache'] = BLOCK_NO_CACHE;

      $blocks['kegg_base']['info'] = t('Analsyis: KEGG Details');
      $blocks['kegg_base']['cache'] = BLOCK_NO_CACHE;

       
      return $blocks;


    case 'view':
      if (user_access('access chado_analysis_kegg content') and arg(0) == 'node' and is_numeric(arg(1))) {
        $nid = arg(1);
        $node = node_load($nid);

        $block = array();
        switch ($delta) {
          case 'featurekegg':
            $block['subject'] = t('KEGG Terms');
            $block['content'] = theme('tripal_feature_kegg_terms', $node);
            break;

          case 'orgkegg':
            $block['subject'] = t('KEGG Terms');
            $block['content'] = theme('tripal_organism_kegg_summary', $node);
            break;

          case 'kegg_base':
            $block['subject'] = t('KEGG Terms');
            $block['content'] = theme('tripal_analysis_kegg_report', $node);
            break;

          default :
        }
        return $block;
      }
  }
}
/*******************************************************************************
 * HOOK: Implementation of hook_nodeapi()
* Display library information for associated features or organisms
* This function also provides contents for indexing
*/
function tripal_analysis_kegg_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':

      // add the library to the organism/feature search indexing
      if ($node->build_mode == NODE_BUILD_SEARCH_INDEX) {
        $node->content['tripal_analysis_kegg_search_index'] = array(
            '#value' => theme('tripal_analysis_kegg_search_index', $node),
            '#weight' => 6,
        );
      } 
      elseif ($node->build_mode == NODE_BUILD_SEARCH_RESULT) {
        $node->content['tripal_analysis_kegg_search_result'] = array(
            '#value' => theme('tripal_analysis_kegg_search_result', $node),
            '#weight' => 6,
        );
      } 
      else {
        switch ($node->type) {
          case 'chado_organism':
            // Show KEGG report on the analysis page
            $node->content['tripal_organism_kegg_summary'] = array(
            '#value' => theme('tripal_organism_kegg_summary', $node),
            );
            break;
          case 'chado_feature':
            // Show KEGG terms on a feature page
            $node->content['tripal_feature_kegg_terms'] = array(
            '#value' => theme('tripal_feature_kegg_terms', $node),
            );
        }

      }
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function tripal_analysis_kegg_theme_registry_alter(&$info) {
  // Inject our module into the node theme registry as being an available theme
  // path so that we can override the node template for our content type.
  array_splice($info['node']['theme paths'], 1, 0, array(drupal_get_path('module', 'tripal_analysis_kegg')));
}

/************************************************************************
 *  We need to let drupal know about our theme functions and their arguments.
*  We create theme functions to allow users of the module to customize the
*  look and feel of the output generated in this module
*/
function tripal_analysis_kegg_theme() {
  $path = drupal_get_path('module', 'tripal_analysis_kegg') . '/theme';
  
  return array(
    'tripal_analysis_kegg_search_index' => array(
      'arguments' => array('node'),
    ),
    'tripal_analysis_kegg_search_result' => array(
      'arguments' => array('node'),
    ),
    'tripal_organism_kegg_summary' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_organism_kegg_summary',
      'path' => $path . '/tripal_organism',
    ),
    'tripal_feature_kegg_terms' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_kegg_terms',
      'path' => $path . '/tripal_feature',
    ),
    'tripal_analysis_kegg_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_analysis_kegg_base',
      'path' => $path . '/tripal_analysis_kegg',
    ), 
    'tripal_analysis_kegg_report' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_analysis_kegg_report',
      'path' => $path . '/tripal_analysis_kegg',
    ),
    'chado_analysis_kegg_node_form' => array(
      'arguments' => array('form'),
    ),
  );
}
/**
 *
 *
 * @ingroup tripal_analysis_kegg
 */
function tripal_analysis_kegg_preprocess(&$variables) {

  // if the template file is the default node template file then we want
  // to add all of our variables.
  if ($variables['template_files'][0] == 'node-chado_analysis_kegg') {
    $analysis = $variables['node']->analysis;
    $report = tripal_analysis_kegg_full_report($analysis->analysis_id);
    
    if (!is_object($analysis->tripal_analysis_kegg)) {
      $analysis->tripal_analysis_kegg = new stdClass;  
    }
    $analysis->tripal_analysis_kegg->kegg_report = $report;
  }
}
/**
 *
 * @ingroup tripal_analysis_kegg
 */
function tripal_analysis_kegg_preprocess_tripal_organism_kegg_summary(&$variables) {
  $node = $variables['node'];
  $organism = $node->organism;
  if (!is_object($organism->tripal_analysis_kegg)){
    $organism->tripal_analysis_kegg = new stdClass;  
  }
  $organism->tripal_analysis_kegg->select_form = tripal_analysis_kegg_load_organism_kegg_summary($node);
}
/**
 *
 */
function tripal_analysis_kegg_preprocess_tripal_feature_kegg_terms(&$variables) {
  $node = $variables['node'];
  $feature = $node->feature;
  if (!is_object($feature->tripal_analysis_kegg)) {
    $feature->tripal_analysis_kegg = new stdClass;  
  }
  $feature->tripal_analysis_kegg->results = tripal_analysis_kegg_load_feature_terms($feature);
  $feature->tripal_analysis_kegg->results_v0_3 = tripal_analysis_kegg_load_feature_terms_6_x_0_3($feature);
}
/************************************************************************
 */
function theme_tripal_analysis_kegg_search_index($node) {
  if ($node->type == 'chado_feature') {
    // Find cvterm_id for 'kegg_brite_data'
    $sql = "SELECT cvterm_id
    FROM {cvterm} CVT
    INNER JOIN {cv} ON cv.cv_id = CVT.cv_id
    WHERE cv.name = 'tripal'
    AND CVT.name = '%s'";
    
    $brite_id = db_result(chado_query($sql, 'kegg_brite_data'));

    // Get analysis id
    $sql = "SELECT analysis_id AS aid
    FROM {analysisfeature} AF
    INNER JOIN {analysisfeatureprop} AFP ON AF.analysisfeature_id = AFP.analysisfeature_id
    WHERE feature_id = %d
    AND AFP.type_id = %d
    GROUP BY analysis_id";
    $feature = $node->feature;
    $feature_id = $feature->feature_id;
    $hasResult = db_result(chado_query($sql, $feature_id, $brite_id));
    $result = chado_query($sql, $feature->feature_id, $brite_id);

    // Show kegg result ORDER BY time
    if ($hasResult) { // If there is any result, show expandable box
      $content = "";

      while ($ana = db_fetch_object($result)) {
        // Show analysis date
        $sql = "SELECT name, to_char(timeexecuted, 'MM-DD-YYYY') AS time
        FROM {analysis}
        WHERE analysis_id = %d";
        $ana_details = db_fetch_object(chado_query($sql, $ana->aid));
        // Find node id for the analysis
        
        $ana_nid = db_result(db_query("SELECT nid FROM {chado_analysis} WHERE analysis_id = %d", $ana->aid));
        $ana_url = url("node/". $ana_nid);
        
         
        // Show content
        $content .= "$ana_details->name";
         
        // Show Kegg results
        $sql = "SELECT AFP.value AS afpvalue
        FROM {analysisfeatureprop} AFP
        INNER JOIN {analysisfeature} AF on AF.analysisfeature_id = AFP.analysisfeature_id
        WHERE AF.analysis_id = %d
        AND AF.feature_id = %d
        ";
        $kegg_results = chado_query($sql, $ana->aid, $feature_id);
        while ($afp = db_fetch_object($kegg_results)) {
          $content .= " $afp->afpvalue";
        }
      }
    }    
    return $content;
  }
}

/************************************************************************
 */
function theme_tripal_analysis_kegg_search_result($node) {
  //  $content = theme_tripal_analysis_kegg_node_add($node);
  //  return $content;
}


/************************************************************************
 */
function tripal_analysis_kegg_load_organism_kegg_summary($node) {
  $organism = $node->organism;

  // find analyses that have KEGG terms
  $sql = "
    SELECT analysis_id
    FROM {kegg_by_organism} KBO
    WHERE organism_id = %d
    ORDER BY analysis_id DESC
  ";
  
  $results = chado_query($sql, $organism->organism_id);
  

  # check to ensure we have access to at least one of the KEGG analyses
  $has_results = 0;
  while ($analysis = db_fetch_object($results)) {
    $anode = tripal_analysis_get_node($analysis->analysis_id);
    if (node_access("view", $anode)) {
      $has_results = 1;
    }
  }
  return array(
    'has_results' => $has_results,
    'form' => drupal_get_form('tripal_analysis_kegg_select_form', $node),
  );
}
/************************************************************************
 *
*/

function tripal_analysis_kegg_org_report($analysis_id) {
  $content = tripal_analysis_kegg_full_report($analysis_id);
  $opt = array($content);
  return drupal_json($opt);
}
/************************************************************************
 */
function tripal_analysis_kegg_full_report($analysis_id) {
  $has_results = 0;
   
  // The cvterm for KEGG Brite heirarchies has changed, therefore, we
  // have two queries, one for the new method and one for backwards
  // compatiblity.  The data, however, is still stored in the same way.
  // the SQL below will pull both forms:
  $sql = "
    SELECT CVT.name, CVT.cvterm_id
    FROM {cvterm} CVT
      INNER JOIN {analysisprop} AP ON CVT.cvterm_id = AP.type_id
      INNER JOIN {cv} CV on CVT.cv_id = CV.cv_id
    WHERE AP.analysis_id = %d
      AND (CVT.definition LIKE 'KEGG BRITE term: %' or CV.name = 'KEGG_BRITE')
    ORDER BY CVT.cvterm_id
  ";
  $result = chado_query($sql, $analysis_id);

  if (db_result($result)) {
    return $content = tripal_analysis_kegg_brite($analysis_id, $type_id, 0);
  }
   
  return "<i>Note:</i> No results available.";
}
/**
 * Tripal Kegg administrative setting form. This function is called by
 * tripal_analysis module which asks for an admin form to show on the page
 */
function tripal_analysis_kegg_get_settings() {
  // Get an array of node types with internal names as keys
  $options = node_get_types('names');
  // Add 'chado_feature' to allowed content types for showing kegg results
  $allowedoptions ['chado_feature'] = "Show KEGG results on feature pages";
  $allowedoptions ['chado_analysis_kegg'] = "Show KEGG BRITE results on the analysis page.";
  $allowedoptions ['chado_organism'] = "Show KEGG BRITE results on the organism pages.";

  $form['description'] = array(
      '#type' => 'item',
      '#value' => t("Some chado features were analyzed by KEGG automatic 
          annotation server (KAAS). This option allows user to display the 
          kegg analysis results. Please read user manual for storage and 
          display of kegg files. Check the box to enable the analysis 
          results. Uncheck to disable it."),
      '#weight' => 0,
  );

  $form['tripal_analysis_kegg_setting'] = array(
      '#type' => 'checkboxes',
      '#options' => $allowedoptions,
      '#default_value' => variable_get('tripal_analysis_kegg_setting',
          array('chado_feature', 'chado_analysis_kegg')),
  );

  $settings->form = $form;
  $settings->title = "Tripal Kegg";
  return $settings;
}
/**
 * 
 * @param unknown $node
 */
function tripal_analysis_kegg_organism_results($node) {
  $node = node_load($node);
  return tripal_analysis_kegg_organism_add($node);
}
/**
 * 
 * @param  $feature
 * @return
 */
function tripal_analysis_kegg_load_feature_terms($feature) {

  $feature_id = $feature->feature_id;
  $results = array();
   
  // Get the KEGG orthlogs for this feature
  $values = array(
    'feature_id' => $feature_id,
    'cvterm_id' => array(
      'cv_id' => array(
        'name' => 'KEGG_ORTHOLOGY'
      ),
    ),
  );
  $options = array('return_array' => 1);
  $results['KO'] = tripal_core_generate_chado_var('feature_cvterm', $values, $options);

  // Get the KEGG modules for this feature
  $values = array(
    'feature_id' => $feature_id,
    'cvterm_id' => array(
      'cv_id' => array(
        'name' => 'KEGG_MODULE'
      ),
    ),
  );
  $options = array('return_array' => 1);
  $results['MODULE'] = tripal_core_generate_chado_var('feature_cvterm', $values, $options);

  // Get the KEGG pathways for this feature
  $values = array(
    'feature_id' => $feature_id,
    'cvterm_id' => array(
      'cv_id' => array(
         'name' => 'KEGG_PATHWAY'
      ),
    ),
  );
  $results['PATH'] = tripal_core_generate_chado_var('feature_cvterm', $values, $options);
  
  // unfortunatly, these terms were stored in the featureprop table at one point
  // in the life of this module.  This was incorrect.  However, for backwards
  // compatibility we will look for orthologs and pathways stored in the featureprop
  // table and add those to our list.
  $values = array(
    'feature_id' => $feature_id,
    'type_id' => array(
        'cv_id' => array(
            'name' => 'KEGG_ORTHOLOGY'
        ),
    ),
  );
  $props = tripal_core_generate_chado_var('featureprop', $values, $options);
  foreach ($props as $prop) {
    $found = 0;
    foreach ($results['KO'] as $fcvterm) {
      if ($prop->type_id->cvterm_id == $fcvterm->cvterm_id->cvterm_id) {
        $found = 1;
      }      
    }
    if (!$found) {
      // we did not find the term in the feature_cvterm records so change this property
      // to have a cvterm_id rather than a type_id and mark this as found        
      $prop->cvterm_id = $prop->type_id;
      $results['KO'][] = $prop;
    }
  }
  
  // now do the same for the pathways
  $values = array(
    'feature_id' => $feature_id,
    'type_id' => array(
        'cv_id' => array(
            'name' => 'KEGG_PATHWAY'
        ),
    ),
  );
  $props = tripal_core_generate_chado_var('featureprop', $values, $options);
  foreach ($props as $prop) {
    $found = 0;
    foreach ($results['PATH'] as $fcvterm) {
      if ($prop->type_id->cvterm_id == $fcvterm->cvterm_id->cvterm_id) {
        $found = 1;
      }      
    }
    if (!$found) {
      // we did not find the term in the feature_cvterm records so change this property
      // to have a cvterm_id rather than a type_id and mark this as found        
      $prop->cvterm_id = $prop->type_id;
      $results['PATH'][] = $prop;
    }
  }
  return $results;
}

/**
 * This function is kept for backwards compatiblity with KEGG results
 * stored using the 6.x-0.3-0.1 version of this module.
 */
function tripal_analysis_kegg_load_feature_terms_6_x_0_3($feature) {

  $feature_id = $feature->feature_id;

  // Get the KEGG results stored using the term 'kegg_brite_data'
  $select = array(
      'analysisfeature_id' => array(
          'feature_id' => $feature_id,
      ),
      'type_id' => array(
          'name' => 'kegg_brite_data',
          'cv_id' => array(
              'name' => 'tripal'
          ),
      ),
  );
  $afeatureprops = tripal_core_chado_select('analysisfeatureprop', array('*'), $select);
  if (!$afeatureprops) {
    return;
  }

  // iterate through all of the KEGG properties for this feature
  $results = array();
  foreach ($afeatureprops as $index => $afeatureprop) {

    // get the analysis feature record
    $analysisfeature_arr = tripal_core_chado_select('analysisfeature', array('analysis_id'),
        array('analysisfeature_id' => $afeatureprop->analysisfeature_id));
    $analysisfeature = $analysisfeature_arr[0];

    // get the analysis record and the analysis_id
    $analysis = tripal_core_generate_chado_var('analysis',
        array('analysis_id' => $analysisfeature->analysis_id));
    $analysis_id = $analysis->analysis_id;

    $results[$analysis_id]['analysis'] = $analysis;
  }

  // now get all the terms for each analysis
  foreach ($results as $analysis_id => $arr) {
    $select = array(
        'analysisfeature_id' => array(
            'analysis_id' => $analysis_id,
            'feature_id' => $feature_id,
        ),
        'type_id' => array(
            'name' => 'kegg_brite_data',
            'cv_id' => array(
                'name' => 'tripal',
            ),
        ),
    );
    $terms = tripal_core_chado_select('analysisfeatureprop', array('*'), $select);
    foreach ($terms as $term) {
      $results[$analysis_id]['terms'][] = $term->value;
    }
  }

  return $results;
}
/************************************************************************
 */
function tripal_analysis_kegg_select_form(&$form_state = NULL, $node) {

  $form = array();
  // find analyses that have KEGG terms
  $sql = "
  SELECT *
  FROM {kegg_by_organism} KBO
  WHERE organism_id = %d
  ORDER BY analysis_id DESC
  ";
  
  $results = chado_query($sql, $node->organism->organism_id);
  

  $analyses = array();
  $analyses[''] = '';
  while ($analysis = db_fetch_object($results)) {
    # check to see if the user has permission to see this analysis
    $anode = tripal_analysis_get_node($analysis->analysis_id);
    if (node_access("view", $anode)) {
      $analyses[$analysis->analysis_id] = "$analysis->analysis_name";
    }
  }

  global $base_url;
  // we need to set some hidden values for the javascript to use
  $form['theme_dir'] = array(
      '#type' => 'hidden',
      '#value' => drupal_get_path('theme', 'tripal'),
  );
  $form['base_url'] = array(
      '#type' => 'hidden',
      '#value' => $base_url,
  );
  // now generate the select box
  global $base_url;
  $theme_dir = drupal_get_path('theme', 'tripal');
  $form['tripal_analysis_kegg_select'] = array(
      '#title' => t('Select a KEGG report to view'),
      '#description' => t('Any analysis with KEGG results related to this organism are available for viewing. For further information, see the analysis information page.'),
      '#type'  => 'select',
      '#options' => $analyses,
      '#attributes' => array(
          'onchange' => "tripal_analysis_kegg_org_report(this.options[this.selectedIndex].value, '" . $base_url . "', '" . $theme_dir . "')"
      ),
  );
  return $form;
}

/**
 * 
 * @param unknown_type $form
 */
function theme_chado_analysis_kegg_node_form($form) {

  $properties_table = tripal_analysis_theme_node_form_properties($form);
  $markup .= $properties_table;

  $form['properties']['table'] = array(
    '#type' => 'markup',
    '#value' =>  $markup,
    '#prefix' => '<div id="tripal-analysis-edit-properties-table">',
    '#suffix' => '</div>',
  );
  $form['buttons']['#weight'] = 50;
  return drupal_render($form);
}